/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransactionRouteImport } from './routes/transaction'
import { Route as SettingRouteImport } from './routes/setting'
import { Route as HistoryRouteImport } from './routes/history'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'

const TransactionRoute = TransactionRouteImport.update({
  id: '/transaction',
  path: '/transaction',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingRoute = SettingRouteImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/history': typeof HistoryRoute
  '/setting': typeof SettingRoute
  '/transaction': typeof TransactionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/history': typeof HistoryRoute
  '/setting': typeof SettingRoute
  '/transaction': typeof TransactionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/history': typeof HistoryRoute
  '/setting': typeof SettingRoute
  '/transaction': typeof TransactionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/account' | '/history' | '/setting' | '/transaction'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/account' | '/history' | '/setting' | '/transaction'
  id: '__root__' | '/' | '/account' | '/history' | '/setting' | '/transaction'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  HistoryRoute: typeof HistoryRoute
  SettingRoute: typeof SettingRoute
  TransactionRoute: typeof TransactionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transaction': {
      id: '/transaction'
      path: '/transaction'
      fullPath: '/transaction'
      preLoaderRoute: typeof TransactionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  HistoryRoute: HistoryRoute,
  SettingRoute: SettingRoute,
  TransactionRoute: TransactionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
